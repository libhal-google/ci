# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: üßº lint

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      library:
        required: true
        type: string
      source_dir:
        required: true
        type: string
      repo:
        required: true
        type: string

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          repository: ${{ inputs.repo }}

      - name: üì• Install libclang-11-dev (for name style check)
        shell: bash
        run: sudo apt install libclang-11-dev

      - name: üì• Install pip package 'clang' & 'pyyaml' (for ncc)
        shell: bash
        run: python3 -m pip install clang==11.1 pyyaml

      # Because inputs.library is required for workflow_calls, if this value is
      # blank it means that the workflow was ran in libhal and not
      # remotely.
      - name: üåê Downloading .naming.style from libhal
        run: wget https://raw.githubusercontent.com/libhal/libhal/main/.naming.style -O .naming.style

      - name: üåê Downloading .clang-format from libhal
        run: wget https://raw.githubusercontent.com/libhal/libhal/main/.clang-format -O .clang-format

      - name: üì• Install NCC (Naming Convention Check)
        shell: bash
        run: git clone https://github.com/nithinn/ncc.git ncc

      - name: Check if `src/` directory existence
        id: check_src_files
        uses: andstor/file-existence-action@v1
        with:
          files: "src/"

      - name: Check if `tests/` directory existence
        id: check_tests_files
        uses: andstor/file-existence-action@v1
        with:
          files: "tests/"

      - name: üìÉ Naming Convention Check in `include/` Directory
        shell: bash
        if: always()
        run: |
          ./ncc/ncc.py --recurse --path include/ \
          --exclude */third_party/* \
          --style .naming.style | tee ncc.stderr
          [ ! -s ncc.stderr ]

      - name: üìÉ Naming Convention Check in `tests/`
        shell: bash
        if: always() && steps.check_tests_files.outputs.files_exists == 'true'
        run: |
          ./ncc/ncc.py --recurse --path ./tests/ \
          --exclude */third_party/* \
          --style .naming.style | tee ncc.stderr
          [ ! -s ncc.stderr ]

      - name: üìÉ Naming Convention Check in `src/` Directory
        shell: bash
        if: always() && steps.check_src_files.outputs.files_exists == 'true'
        run: |
          ./ncc/ncc.py --recurse --path src/ \
          --exclude */third_party/* \
          --style .naming.style | tee ncc.stderr
          [ ! -s ncc.stderr ]

      - name: üßπ Format Check `src/` directory
        uses: DoozyX/clang-format-lint-action@v0.15
        if: always()
        with:
          source: ${{ inputs.source_dir }}
          exclude: "./third_party/*"
          extensions: "hpp,cpp"
          clangFormatVersion: 15
          style: file

      - name: üßπ Format Check `test/` code
        uses: DoozyX/clang-format-lint-action@v0.15
        if: always()
        with:
          source: ./tests/
          exclude: "./third_party/*"
          extensions: "hpp,cpp"
          clangFormatVersion: 15
          style: file
